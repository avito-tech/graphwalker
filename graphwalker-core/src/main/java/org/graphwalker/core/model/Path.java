package org.graphwalker.core.model;

/*
 * #%L
 * GraphWalker Core
 * %%
 * Copyright (C) 2005 - 2014 GraphWalker
 * %%
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * #L%
 */

import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.ListIterator;

/**
 * <h1>Path</h1>
 * The Path is a sequence vertices and edges.
 * </p>
 * When a test is generated by GraphWalker, it will be a sequence of vertices and
 * edges. The Path keeps track of the generated sequence.
 *
 * @author Nils Olsson
 */
public class Path<E extends Element> extends ArrayDeque<E> {

  public Path() {
    super();
  }

  public Path(Collection<E> collection) {
    super(collection);
  }

  public Path<E> before(E element) {
    Path<E> subPath = new Path<>();
    for (E e : new ArrayList<>(this)) {
      if (e.equals(element)) {
        break;
      }
      subPath.offerLast(e);
    }
    return subPath;
  }

  public Path<E> after(E element) {
    Path<E> subPath = new Path<>();
    ListIterator<E> iterator = new ArrayList<>(this).listIterator(size());
    while(iterator.hasPrevious()) {
      E e = iterator.previous();
      if (e.equals(element)) {
        break;
      }
      subPath.offerFirst(e);
    }
    return subPath;
  }

  @Override
  public int hashCode() {
    return new ArrayList<>(this).hashCode();
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    } else if (!(obj instanceof Path)) {
      return false;
    } else {
      return new ArrayList<>(this).equals(new ArrayList<Path>((Path) obj));
    }
  }

  @Override
  public String toString() {
    Iterator<E> it = this.iterator();
    if (!it.hasNext()) {
      return "[]";
    } else {
      StringBuilder sb = new StringBuilder();
      sb.append('[');

      while (true) {
        E e = it.next();

        boolean isVertex = e instanceof Vertex.RuntimeVertex;
        if (isVertex) {
          sb.append(e.toString());
        }

        if (!it.hasNext()) {
          return sb.append(']').toString();
        } else if (isVertex) {
          sb.append('-').append('>');
        }
      }
    }
  }
}
